(=) (sinup) =
@ js-cookie/js-cookie Pubic Q Notifications & Fork 24k wy Star 198k
<> Code © Issues 1 T2 Pullrequests ©) Discussions © Actions 1) wiki a
P main « coi le Aout
Asimple, lightweight JavaScript API
© dependabot{bot] Bump eslint-plu... -.  on20Jul ©829 for handling browser cookies
® github Tidy up dependabot config 4 months ago mee Gag
(© examples Update overlooked reference... 13monthsago 0 Readme
fm st Stick to consistent cookie ter... 12months ago MIT license
yw 19.8k stars
& test ‘Simplify passing attributes re... 5 months ago
iy passing s © 342 watching
DB  -eslintignore Add examples, starting with ... Syears ago 2.1k forks
© -eslintrc.json Bump eslint-config-standard f..._ 13 months ago
DB citignore Set up package for module/n.... 3 years ago Releases 34
D prettierign... Configure prettier to ignore dist syearsago  va.0.
on 1 Sep 2021,
D -telease-itj.... Fix conditional in release hook 3 years ago
+33 releases
O Contr». Revert "Update docs to reflec... 2 years ago
© Gruntfilejs Bump standard from 14.3.4t.... 13 months ago
Packages
OQ LIceENseE Update LICENSE to add cont.. years ago
No packages published
() README.md = Remove accidentally duplicat... 8 months ago
(SERVER. docs: use https protocol for R... 5 months ago
Used by 262k
D browsersta... Add Google Pixel to tested d... 8 months ago
HD + 201,002
DB index.js Fix importing module when n... 3 years ago aU Ca 6 i=
(1 packageson Bump eslint-plugin-html from ... last month
. Contributors 50
© rollup.confi... Revert "Generate Commond... 14 months ago
[= README.md =) Q ® $ Ce)
> Cookies.|_defineGetter_
ee nett +39 contributors
¢ JavaScript Cookie Languages
. =
© JavaScript 96.2% © HTML 3.8%

Asimple, lightweight JavaScript API for handling cookies
+ Works in all browsers
+ Accepts any character
+ Heavily tested
+ No dependency
+ Supports ES modules
+ Supports AMD/CommonJS
* RFC 6265 compliant
* Useful Wiki
* Enable custom encoding/decoding
+ <800 bytes gzipped!

@ If you're viewing this at https://github.comljs-

cookieljs-cookie, you're reading the documentation

for the master branch. View documentation for the

latest release. B®

2 Installation
@NPM

JavaScript Cookie supports npm under the name js-

cookie .
$ npm i js-cookie

The npm package has a modute field pointing to an ES

module variant of the library, mainly to provide support for

ES module aware bundlers, whereas its browser field

points to an UMD module for full backward compatibility.

@ Direct download

Starting with version 3 releases are distributed with two

variants of this library, an ES module as well as an UMD

module.

Note the different extensions: .mjs denotes the ES

module, whereas . js is the UMD one.

Example for how to load the ES module in a browser:
<script type="modute" src="/path/to/js.cookie.mjs
<script type="modute">

import Cookies from '/path/to/js.cookie.mjs'
Cookies.set('foo', "bar')

</script>
Not all browsers support ES modules natively yet. For this
reason the npm packagelrelease provides both the ES
and UMD module variant and you may want to include the
ES module along with the UMD fallback to account for
this:

<script type="modute" src="/path/to/js.cookie.mjs

<script nomodule defer src="/path/to/js.cookie.js

Here we're loading the nomodule script in a deferred

fashion, because ES modules are deferred by default.

This may not be strictly necessary depending on how

you're using the library.

@ CDN
Alternatively, include it via jsDelivr CDN.
@ ES Module

Example for how to import the ES module from another

module:

import Cookies from 'js-cookie’

Cookies. set('foo', ‘bar')

@ Basic Usage

Create a cookie, valid across the entire site:

Cookies. set('name', 'value')

Create a cookie that expires 7 days from now, valid across

the entire site:

Cookies.set('name', ‘value’, { expires: 7 })

Create an expiring cookie, valid to the path of the current

page:

Cookies.set('name', ‘value’, { expires: 7, path:
Read cookie:

Cookies.get('name') // => ‘value!

Cookies. get(*nothing') // => undefined
Read all visible cookies:

Cookies.get() // => { name: ‘value’ }

Note: It is not possible to read a particular cookie by

passing one of the cookie attributes (which may or may

not have been used when writing the cookie in question):
Cookies.get("foo', { domain: 'sub.example.com' })

The cookie with the name foo will only be available on
.get() if it's visible from where the code is called; the

domain and/or path attribute will not have an effect when

reading.

Delete cookie:

Cookies. remove( ‘name! )

Delete a cookie valid to the path of the current page:
Cookies.set('name', ‘value’, { path: '* })

Cookies. remove('name') // fail!

Cookies. remove('name', { path: '' }) // removed!
IMPORTANT! When deleting a cookie and you're not
relying on the default attributes, you must pass the exact
same path and domain attributes that were used to set the
cookie:

Cookies. remove('name', { path: '', domain: '.your
Note: Removing a nonexistent cookie neither raises any
exception nor returns any value.

¢ Namespace conflicts

If there is any danger of a conflict with the namespace

cookies , the nocontlict method will allow you to

define a new namespace and preserve the original one.

This is especially useful when running the script on third

party sites e.g. as part of a widget or SDK.

// Assign the js-cookie api to a different variab

var Cookies? = Cookies.noConflict()

Cookies2.set(‘name', 'value')

Note: The .noconflict method is not necessary when

using AMD or CommonJS, thus it is not exposed in those

environments.
¢ Encoding

This project is RFC 6265 compliant. All special characters

that are not allowed in the cookie-name or cookie-value

are encoded with each one’s UTF-8 Hex equivalent using

percent-encoding.

The only character in cookie-name or cookie-value that is

allowed and still encoded is the percent % character, it is

escaped in order to interpret percent input as literal.

Please note that the default encoding/decoding strategy is

meant to be interoperable only between cookies that are

read/written by js-cookie. To override the default
encoding/decoding strategy you need to use a converter.

Note: According to RFC 6265, your cookies may get

deleted if they are too big or there are too many cookies in

the same domain, more details here.

@ Cookie Attributes

Cookie attribute defaults can be set globally by creating

an instance of the api via withattributes() , or

individually for each call to cookies.set(...) by passing

a plain object as the last argument. Per-call attributes

override the default attributes.

2 expires

Define when the cookie will be removed. Value must be a

Nunber Which will be interpreted as days from time of

creation or a Date instance. If omitted, the cookie

becomes a session cookie.

To create a cookie that expires in less than a day, you can

check the FAQ on the Wiki.

Default: Cookie is removed when the user closes the

browser.

Examples:

Cookies.set('name', ‘value’, { expires: 365 })

Cookies. get('name') // => ‘value!

Cookies. remove( ‘name! )

2 path

A String indicating the path where the cookie is visible.

Default: /

Examples:

Cookies.set('name', ‘value’, { path: '* })

Cookies. get('name') // => ‘value!

Cookies. remove('name', { path: '* })

Note regarding Internet Explorer:

Due to an obscure bug in the underlying WinINET

InternetGetCookie implementation, IE's

document.cookie will not return a cookie if it was set

with a path attribute containing a filename.

(From Internet Explorer Cookie Internals (FAQ)

This means one cannot set a path using

window. location.pathname in case such pathname

contains a filename like so: /check.htm1 (oF at least,

such cookie cannot be read correctly).

In fact, you should never allow untrusted input to set the

cookie attributes or you might be exposed to a XSS

attack.

2 domain

A string indicating a valid domain where the cookie

should be visible. The cookie will also be visible to all

subdomains.

Default: Cookie is visible only to the domain or

subdomain of the page where the cookie was created,

except for Internet Explorer (see below)

Examples:

Assuming a cookie that is being created on site.com :
Cookies.set('name', ‘value’, { domain: ‘subdomain
Cookies.get(‘name') // => undefined (need to read

Note regarding Internet Explorer default behavior:

Q3: If don't specify a DOMAIN attribute (for) a

cookie, IE sends it to all nested subdomains

anyway?

A: Yes, a cookie set on example.com will be sent to

sub2.sub1.example.com

Internet Explorer differs from other browsers in this

regard.

(From Internet Explorer Cookie Internals (FAQ)

This means that if you omit the domain attribute, it will be

visible for a subdomain in IE.

@ secure

Either true or fatse , indicating if the cookie

transmission requires a secure protocol (https).

Default: No secure protocol requirement.

Examples:

Cookies.set('name', ‘value’, { secure: true })

Cookies. get('name') // => ‘value!

Cookies. remove( ‘name! )

2 sameSite

A string , allowing to control whether the browser is

sending a cookie along with cross-site requests.

Default: not set.

Note that more recent browsers are making "Lax" the

default value even without specifiying anything here.
Examples:
Cookies.set('name', ‘value’, { sameSite: ‘strict’
Cookies. get('name') // => ‘value!
Cookies. remove( ‘name! )
@ Setting up defaults

const api = Cookies.withAttributes({ path: '/', d
@ Converters
@ Read

Create a new instance of the api that overrides the default

decoding implementation. All get methods that rely in a

proper decoding to work, such as Cookies.get() and

Cookies. get( name") , will run the given converter for

each cookie. The returned value will be used as the

cookie value.

Example from reading one of the cookies that can only be

decoded using the escape function:

document .cookie = ‘escaped=%u5317'

document .cookie = 'default=XESK8CX97"

var cookies = Cookies.withConverter({

read: function (value, name) {
if (name === ‘escaped') {
return unescape(value)
t
7/ Fall back to default for all other cookies
return Cookies.converter.read(value, name)
r

52)

cookies. get("escaped') // 4t

cookies. get('default') // 4t

cookies.get() // { escaped: ‘at, default: "at" }

2 Write

Create a new instance of the api that overrides the default

encoding implementation:

Cookies .withConverter({

write: function (value, name) {
return value. toUpperCase()
r
52)
 TypeScript declarations
$ npm i @types/js-cookie
@ Server-side integration
Check out the Servers Docs
Contributing
Check out the Contributing Guidelines
@ Security
For vulnerability reports, send an e-mail to js-cookie at
googlegroups dot com
@ Releasing

We are using release-it for automated releasing.

Start a dry run to see what would happen:
$ npm run release minor -- --dry-run

Do a real release (publishes both to npm as well as create

anew release on GitHub):

$ npm run release minor
GitHub releases are created as a draft and need to be
published manually! (This is so we are able to craft
suitable release notes before publishing.)

@ Supporters

@ sBrowserStack

Many thanks to BrowserStack for providing unlimited

browser testing free of cost.

¢ Authors

* Klaus Hart!

* Fagner Brack

+ And awesome contributors

Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About
©) ©2022 cittiub, ine

(=) (sinup) =
@ js-cookie/js-cookie Pubic Q Notifications & Fork 24k wy Star 198k
<> Code © Issues 1 T2 Pullrequests ©) Discussions © Actions 1) wiki a
P main « coi le Aout
Asimple, lightweight JavaScript API
© dependabot{bot] Bump eslint-plu... -.  on20Jul ©829 for handling browser cookies
® github Tidy up dependabot config 4 months ago mee Gag
(© examples Update overlooked reference... 13monthsago 0 Readme
fm st Stick to consistent cookie ter... 12months ago MIT license
yw 19.8k stars
& test ‘Simplify passing attributes re... 5 months ago
iy passing s © 342 watching
DB  -eslintignore Add examples, starting with ... Syears ago 2.1k forks
© -eslintrc.json Bump eslint-config-standard f..._ 13 months ago
DB citignore Set up package for module/n.... 3 years ago Releases 34
D prettierign... Configure prettier to ignore dist syearsago  va.0.
on 1 Sep 2021,
D -telease-itj.... Fix conditional in release hook 3 years ago
+33 releases
O Contr». Revert "Update docs to reflec... 2 years ago
© Gruntfilejs Bump standard from 14.3.4t.... 13 months ago
Packages
OQ LIceENseE Update LICENSE to add cont.. years ago
No packages published
() README.md = Remove accidentally duplicat... 8 months ago
(SERVER. docs: use https protocol for R... 5 months ago
Used by 262k
D browsersta... Add Google Pixel to tested d... 8 months ago
HD + 201,002
DB index.js Fix importing module when n... 3 years ago aU Ca 6 i=
(1 packageson Bump eslint-plugin-html from ... last month
. Contributors 50
© rollup.confi... Revert "Generate Commond... 14 months ago
[= README.md =) Q ® $ Ce)
> Cookies.|_defineGetter_
ee nett +39 contributors
¢ JavaScript Cookie Languages
. =
© JavaScript 96.2% © HTML 3.8%

Asimple, lightweight JavaScript API for handling cookies
+ Works in all browsers
+ Accepts any character
+ Heavily tested
+ No dependency
+ Supports ES modules
+ Supports AMD/CommonJS
* RFC 6265 compliant
* Useful Wiki
* Enable custom encoding/decoding
+ <800 bytes gzipped!

@ If you're viewing this at https://github.comljs-

cookieljs-cookie, you're reading the documentation

for the master branch. View documentation for the

latest release. B®

2 Installation
@NPM

JavaScript Cookie supports npm under the name js-

cookie .
$ npm i js-cookie

The npm package has a modute field pointing to an ES

module variant of the library, mainly to provide support for

ES module aware bundlers, whereas its browser field

points to an UMD module for full backward compatibility.

@ Direct download

Starting with version 3 releases are distributed with two

variants of this library, an ES module as well as an UMD

module.

Note the different extensions: .mjs denotes the ES

module, whereas . js is the UMD one.

Example for how to load the ES module in a browser:
<script type="modute" src="/path/to/js.cookie.mjs
<script type="modute">

import Cookies from '/path/to/js.cookie.mjs'
Cookies.set('foo', "bar')

</script>
Not all browsers support ES modules natively yet. For this
reason the npm packagelrelease provides both the ES
and UMD module variant and you may want to include the
ES module along with the UMD fallback to account for
this:

<script type="modute" src="/path/to/js.cookie.mjs

<script nomodule defer src="/path/to/js.cookie.js

Here we're loading the nomodule script in a deferred

fashion, because ES modules are deferred by default.

This may not be strictly necessary depending on how

you're using the library.

@ CDN
Alternatively, include it via jsDelivr CDN.
@ ES Module

Example for how to import the ES module from another

module:

import Cookies from 'js-cookie’

Cookies. set('foo', ‘bar')

@ Basic Usage

Create a cookie, valid across the entire site:

Cookies. set('name', 'value')

Create a cookie that expires 7 days from now, valid across

the entire site:

Cookies.set('name', ‘value’, { expires: 7 })

Create an expiring cookie, valid to the path of the current

page:

Cookies.set('name', ‘value’, { expires: 7, path:
Read cookie:

Cookies.get('name') // => ‘value!

Cookies. get(*nothing') // => undefined
Read all visible cookies:

Cookies.get() // => { name: ‘value’ }

Note: It is not possible to read a particular cookie by

passing one of the cookie attributes (which may or may

not have been used when writing the cookie in question):
Cookies.get("foo', { domain: 'sub.example.com' })

The cookie with the name foo will only be available on
.get() if it's visible from where the code is called; the

domain and/or path attribute will not have an effect when

reading.

Delete cookie:

Cookies. remove( ‘name! )

Delete a cookie valid to the path of the current page:
Cookies.set('name', ‘value’, { path: '* })

Cookies. remove('name') // fail!

Cookies. remove('name', { path: '' }) // removed!
IMPORTANT! When deleting a cookie and you're not
relying on the default attributes, you must pass the exact
same path and domain attributes that were used to set the
cookie:

Cookies. remove('name', { path: '', domain: '.your
Note: Removing a nonexistent cookie neither raises any
exception nor returns any value.

¢ Namespace conflicts

If there is any danger of a conflict with the namespace

cookies , the nocontlict method will allow you to

define a new namespace and preserve the original one.

This is especially useful when running the script on third

party sites e.g. as part of a widget or SDK.

// Assign the js-cookie api to a different variab

var Cookies? = Cookies.noConflict()

Cookies2.set(‘name', 'value')

Note: The .noconflict method is not necessary when

using AMD or CommonJS, thus it is not exposed in those

environments.
¢ Encoding

This project is RFC 6265 compliant. All special characters

that are not allowed in the cookie-name or cookie-value

are encoded with each one’s UTF-8 Hex equivalent using

percent-encoding.

The only character in cookie-name or cookie-value that is

allowed and still encoded is the percent % character, it is

escaped in order to interpret percent input as literal.

Please note that the default encoding/decoding strategy is

meant to be interoperable only between cookies that are

read/written by js-cookie. To override the default
encoding/decoding strategy you need to use a converter.

Note: According to RFC 6265, your cookies may get

deleted if they are too big or there are too many cookies in

the same domain, more details here.

@ Cookie Attributes

Cookie attribute defaults can be set globally by creating

an instance of the api via withattributes() , or

individually for each call to cookies.set(...) by passing

a plain object as the last argument. Per-call attributes

override the default attributes.

2 expires

Define when the cookie will be removed. Value must be a

Nunber Which will be interpreted as days from time of

creation or a Date instance. If omitted, the cookie

becomes a session cookie.

To create a cookie that expires in less than a day, you can

check the FAQ on the Wiki.

Default: Cookie is removed when the user closes the

browser.

Examples:

Cookies.set('name', ‘value’, { expires: 365 })

Cookies. get('name') // => ‘value!

Cookies. remove( ‘name! )

2 path

A String indicating the path where the cookie is visible.

Default: /

Examples:

Cookies.set('name', ‘value’, { path: '* })

Cookies. get('name') // => ‘value!

Cookies. remove('name', { path: '* })

Note regarding Internet Explorer:

Due to an obscure bug in the underlying WinINET

InternetGetCookie implementation, IE's

document.cookie will not return a cookie if it was set

with a path attribute containing a filename.

(From Internet Explorer Cookie Internals (FAQ)

This means one cannot set a path using

window. location.pathname in case such pathname

contains a filename like so: /check.htm1 (oF at least,

such cookie cannot be read correctly).

In fact, you should never allow untrusted input to set the

cookie attributes or you might be exposed to a XSS

attack.

2 domain

A string indicating a valid domain where the cookie

should be visible. The cookie will also be visible to all

subdomains.

Default: Cookie is visible only to the domain or

subdomain of the page where the cookie was created,

except for Internet Explorer (see below)

Examples:

Assuming a cookie that is being created on site.com :
Cookies.set('name', ‘value’, { domain: ‘subdomain
Cookies.get(‘name') // => undefined (need to read

Note regarding Internet Explorer default behavior:

Q3: If don't specify a DOMAIN attribute (for) a

cookie, IE sends it to all nested subdomains

anyway?

A: Yes, a cookie set on example.com will be sent to

sub2.sub1.example.com

Internet Explorer differs from other browsers in this

regard.

(From Internet Explorer Cookie Internals (FAQ)

This means that if you omit the domain attribute, it will be

visible for a subdomain in IE.

@ secure

Either true or fatse , indicating if the cookie

transmission requires a secure protocol (https).

Default: No secure protocol requirement.

Examples:

Cookies.set('name', ‘value’, { secure: true })

Cookies. get('name') // => ‘value!

Cookies. remove( ‘name! )

2 sameSite

A string , allowing to control whether the browser is

sending a cookie along with cross-site requests.

Default: not set.

Note that more recent browsers are making "Lax" the

default value even without specifiying anything here.
Examples:
Cookies.set('name', ‘value’, { sameSite: ‘strict’
Cookies. get('name') // => ‘value!
Cookies. remove( ‘name! )
@ Setting up defaults

const api = Cookies.withAttributes({ path: '/', d
@ Converters
@ Read

Create a new instance of the api that overrides the default

decoding implementation. All get methods that rely in a

proper decoding to work, such as Cookies.get() and

Cookies. get( name") , will run the given converter for

each cookie. The returned value will be used as the

cookie value.

Example from reading one of the cookies that can only be

decoded using the escape function:

document .cookie = ‘escaped=%u5317'

document .cookie = 'default=XESK8CX97"

var cookies = Cookies.withConverter({

read: function (value, name) {
if (name === ‘escaped') {
return unescape(value)
t
7/ Fall back to default for all other cookies
return Cookies.converter.read(value, name)
r

52)

cookies. get("escaped') // 4t

cookies. get('default') // 4t

cookies.get() // { escaped: ‘at, default: "at" }

2 Write

Create a new instance of the api that overrides the default

encoding implementation:

Cookies .withConverter({

write: function (value, name) {
return value. toUpperCase()
r
52)
 TypeScript declarations
$ npm i @types/js-cookie
@ Server-side integration
Check out the Servers Docs
Contributing
Check out the Contributing Guidelines
@ Security
For vulnerability reports, send an e-mail to js-cookie at
googlegroups dot com
@ Releasing

We are using release-it for automated releasing.

Start a dry run to see what would happen:
$ npm run release minor -- --dry-run

Do a real release (publishes both to npm as well as create

anew release on GitHub):

$ npm run release minor
GitHub releases are created as a draft and need to be
published manually! (This is so we are able to craft
suitable release notes before publishing.)

@ Supporters

@ sBrowserStack

Many thanks to BrowserStack for providing unlimited

browser testing free of cost.

¢ Authors

* Klaus Hart!

* Fagner Brack

+ And awesome contributors

Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About
©) ©2022 cittiub, ine

(=) (sinup) =
@ js-cookie/js-cookie Pubic Q Notifications & Fork 24k wy Star 198k
<> Code © Issues 1 T2 Pullrequests ©) Discussions © Actions 1) wiki a
P main « coi le Aout
Asimple, lightweight JavaScript API
© dependabot{bot] Bump eslint-plu... -.  on20Jul ©829 for handling browser cookies
® github Tidy up dependabot config 4 months ago mee Gag
(© examples Update overlooked reference... 13monthsago 0 Readme
fm st Stick to consistent cookie ter... 12months ago MIT license
yw 19.8k stars
& test ‘Simplify passing attributes re... 5 months ago
iy passing s © 342 watching
DB  -eslintignore Add examples, starting with ... Syears ago 2.1k forks
© -eslintrc.json Bump eslint-config-standard f..._ 13 months ago
DB citignore Set up package for module/n.... 3 years ago Releases 34
D prettierign... Configure prettier to ignore dist syearsago  va.0.
on 1 Sep 2021,
D -telease-itj.... Fix conditional in release hook 3 years ago
+33 releases
O Contr». Revert "Update docs to reflec... 2 years ago
© Gruntfilejs Bump standard from 14.3.4t.... 13 months ago
Packages
OQ LIceENseE Update LICENSE to add cont.. years ago
No packages published
() README.md = Remove accidentally duplicat... 8 months ago
(SERVER. docs: use https protocol for R... 5 months ago
Used by 262k
D browsersta... Add Google Pixel to tested d... 8 months ago
HD + 201,002
DB index.js Fix importing module when n... 3 years ago aU Ca 6 i=
(1 packageson Bump eslint-plugin-html from ... last month
. Contributors 50
© rollup.confi... Revert "Generate Commond... 14 months ago
[= README.md =) Q ® $ Ce)
> Cookies.|_defineGetter_
ee nett +39 contributors
¢ JavaScript Cookie Languages
. =
© JavaScript 96.2% © HTML 3.8%

Asimple, lightweight JavaScript API for handling cookies
+ Works in all browsers
+ Accepts any character
+ Heavily tested
+ No dependency
+ Supports ES modules
+ Supports AMD/CommonJS
* RFC 6265 compliant
* Useful Wiki
* Enable custom encoding/decoding
+ <800 bytes gzipped!

@ If you're viewing this at https://github.comljs-

cookieljs-cookie, you're reading the documentation

for the master branch. View documentation for the

latest release. B®

2 Installation
@NPM

JavaScript Cookie supports npm under the name js-

cookie .
$ npm i js-cookie

The npm package has a modute field pointing to an ES

module variant of the library, mainly to provide support for

ES module aware bundlers, whereas its browser field

points to an UMD module for full backward compatibility.

@ Direct download

Starting with version 3 releases are distributed with two

variants of this library, an ES module as well as an UMD

module.

Note the different extensions: .mjs denotes the ES

module, whereas . js is the UMD one.

Example for how to load the ES module in a browser:
<script type="modute" src="/path/to/js.cookie.mjs
<script type="modute">

import Cookies from '/path/to/js.cookie.mjs'
Cookies.set('foo', "bar')

</script>
Not all browsers support ES modules natively yet. For this
reason the npm packagelrelease provides both the ES
and UMD module variant and you may want to include the
ES module along with the UMD fallback to account for
this:

<script type="modute" src="/path/to/js.cookie.mjs

<script nomodule defer src="/path/to/js.cookie.js

Here we're loading the nomodule script in a deferred

fashion, because ES modules are deferred by default.

This may not be strictly necessary depending on how

you're using the library.

@ CDN
Alternatively, include it via jsDelivr CDN.
@ ES Module

Example for how to import the ES module from another

module:

import Cookies from 'js-cookie’

Cookies. set('foo', ‘bar')

@ Basic Usage

Create a cookie, valid across the entire site:

Cookies. set('name', 'value')

Create a cookie that expires 7 days from now, valid across

the entire site:

Cookies.set('name', ‘value’, { expires: 7 })

Create an expiring cookie, valid to the path of the current

page:

Cookies.set('name', ‘value’, { expires: 7, path:
Read cookie:

Cookies.get('name') // => ‘value!

Cookies. get(*nothing') // => undefined
Read all visible cookies:

Cookies.get() // => { name: ‘value’ }

Note: It is not possible to read a particular cookie by

passing one of the cookie attributes (which may or may

not have been used when writing the cookie in question):
Cookies.get("foo', { domain: 'sub.example.com' })

The cookie with the name foo will only be available on
.get() if it's visible from where the code is called; the

domain and/or path attribute will not have an effect when

reading.

Delete cookie:

Cookies. remove( ‘name! )

Delete a cookie valid to the path of the current page:
Cookies.set('name', ‘value’, { path: '* })

Cookies. remove('name') // fail!

Cookies. remove('name', { path: '' }) // removed!
IMPORTANT! When deleting a cookie and you're not
relying on the default attributes, you must pass the exact
same path and domain attributes that were used to set the
cookie:

Cookies. remove('name', { path: '', domain: '.your
Note: Removing a nonexistent cookie neither raises any
exception nor returns any value.

¢ Namespace conflicts

If there is any danger of a conflict with the namespace

cookies , the nocontlict method will allow you to

define a new namespace and preserve the original one.

This is especially useful when running the script on third

party sites e.g. as part of a widget or SDK.

// Assign the js-cookie api to a different variab

var Cookies? = Cookies.noConflict()

Cookies2.set(‘name', 'value')

Note: The .noconflict method is not necessary when

using AMD or CommonJS, thus it is not exposed in those

environments.
¢ Encoding

This project is RFC 6265 compliant. All special characters

that are not allowed in the cookie-name or cookie-value

are encoded with each one’s UTF-8 Hex equivalent using

percent-encoding.

The only character in cookie-name or cookie-value that is

allowed and still encoded is the percent % character, it is

escaped in order to interpret percent input as literal.

Please note that the default encoding/decoding strategy is

meant to be interoperable only between cookies that are

read/written by js-cookie. To override the default
encoding/decoding strategy you need to use a converter.

Note: According to RFC 6265, your cookies may get

deleted if they are too big or there are too many cookies in

the same domain, more details here.

@ Cookie Attributes

Cookie attribute defaults can be set globally by creating

an instance of the api via withattributes() , or

individually for each call to cookies.set(...) by passing

a plain object as the last argument. Per-call attributes

override the default attributes.

2 expires

Define when the cookie will be removed. Value must be a

Nunber Which will be interpreted as days from time of

creation or a Date instance. If omitted, the cookie

becomes a session cookie.

To create a cookie that expires in less than a day, you can

check the FAQ on the Wiki.

Default: Cookie is removed when the user closes the

browser.

Examples:

Cookies.set('name', ‘value’, { expires: 365 })

Cookies. get('name') // => ‘value!

Cookies. remove( ‘name! )

2 path

A String indicating the path where the cookie is visible.

Default: /

Examples:

Cookies.set('name', ‘value’, { path: '* })

Cookies. get('name') // => ‘value!

Cookies. remove('name', { path: '* })

Note regarding Internet Explorer:

Due to an obscure bug in the underlying WinINET

InternetGetCookie implementation, IE's

document.cookie will not return a cookie if it was set

with a path attribute containing a filename.

(From Internet Explorer Cookie Internals (FAQ)

This means one cannot set a path using

window. location.pathname in case such pathname

contains a filename like so: /check.htm1 (oF at least,

such cookie cannot be read correctly).

In fact, you should never allow untrusted input to set the

cookie attributes or you might be exposed to a XSS

attack.

2 domain

A string indicating a valid domain where the cookie

should be visible. The cookie will also be visible to all

subdomains.

Default: Cookie is visible only to the domain or

subdomain of the page where the cookie was created,

except for Internet Explorer (see below)

Examples:

Assuming a cookie that is being created on site.com :
Cookies.set('name', ‘value’, { domain: ‘subdomain
Cookies.get(‘name') // => undefined (need to read

Note regarding Internet Explorer default behavior:

Q3: If don't specify a DOMAIN attribute (for) a

cookie, IE sends it to all nested subdomains

anyway?

A: Yes, a cookie set on example.com will be sent to

sub2.sub1.example.com

Internet Explorer differs from other browsers in this

regard.

(From Internet Explorer Cookie Internals (FAQ)

This means that if you omit the domain attribute, it will be

visible for a subdomain in IE.

@ secure

Either true or fatse , indicating if the cookie

transmission requires a secure protocol (https).

Default: No secure protocol requirement.

Examples:

Cookies.set('name', ‘value’, { secure: true })

Cookies. get('name') // => ‘value!

Cookies. remove( ‘name! )

2 sameSite

A string , allowing to control whether the browser is

sending a cookie along with cross-site requests.

Default: not set.

Note that more recent browsers are making "Lax" the

default value even without specifiying anything here.
Examples:
Cookies.set('name', ‘value’, { sameSite: ‘strict’
Cookies. get('name') // => ‘value!
Cookies. remove( ‘name! )
@ Setting up defaults

const api = Cookies.withAttributes({ path: '/', d
@ Converters
@ Read

Create a new instance of the api that overrides the default

decoding implementation. All get methods that rely in a

proper decoding to work, such as Cookies.get() and

Cookies. get( name") , will run the given converter for

each cookie. The returned value will be used as the

cookie value.

Example from reading one of the cookies that can only be

decoded using the escape function:

document .cookie = ‘escaped=%u5317'

document .cookie = 'default=XESK8CX97"

var cookies = Cookies.withConverter({

read: function (value, name) {
if (name === ‘escaped') {
return unescape(value)
t
7/ Fall back to default for all other cookies
return Cookies.converter.read(value, name)
r

52)

cookies. get("escaped') // 4t

cookies. get('default') // 4t

cookies.get() // { escaped: ‘at, default: "at" }

2 Write

Create a new instance of the api that overrides the default

encoding implementation:

Cookies .withConverter({

write: function (value, name) {
return value. toUpperCase()
r
52)
 TypeScript declarations
$ npm i @types/js-cookie
@ Server-side integration
Check out the Servers Docs
Contributing
Check out the Contributing Guidelines
@ Security
For vulnerability reports, send an e-mail to js-cookie at
googlegroups dot com
@ Releasing

We are using release-it for automated releasing.

Start a dry run to see what would happen:
$ npm run release minor -- --dry-run

Do a real release (publishes both to npm as well as create

anew release on GitHub):

$ npm run release minor
GitHub releases are created as a draft and need to be
published manually! (This is so we are able to craft
suitable release notes before publishing.)

@ Supporters

@ sBrowserStack

Many thanks to BrowserStack for providing unlimited

browser testing free of cost.

¢ Authors

* Klaus Hart!

* Fagner Brack

+ And awesome contributors

Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About
©) ©2022 cittiub, ine

(=) (sinup) =
@ js-cookie/js-cookie Pubic Q Notifications & Fork 24k wy Star 198k
<> Code © Issues 1 T2 Pullrequests ©) Discussions © Actions 1) wiki a
P main « coi le Aout
Asimple, lightweight JavaScript API
© dependabot{bot] Bump eslint-plu... -.  on20Jul ©829 for handling browser cookies
® github Tidy up dependabot config 4 months ago mee Gag
(© examples Update overlooked reference... 13monthsago 0 Readme
fm st Stick to consistent cookie ter... 12months ago MIT license
yw 19.8k stars
& test ‘Simplify passing attributes re... 5 months ago
iy passing s © 342 watching
DB  -eslintignore Add examples, starting with ... Syears ago 2.1k forks
© -eslintrc.json Bump eslint-config-standard f..._ 13 months ago
DB citignore Set up package for module/n.... 3 years ago Releases 34
D prettierign... Configure prettier to ignore dist syearsago  va.0.
on 1 Sep 2021,
D -telease-itj.... Fix conditional in release hook 3 years ago
+33 releases
O Contr». Revert "Update docs to reflec... 2 years ago
© Gruntfilejs Bump standard from 14.3.4t.... 13 months ago
Packages
OQ LIceENseE Update LICENSE to add cont.. years ago
No packages published
() README.md = Remove accidentally duplicat... 8 months ago
(SERVER. docs: use https protocol for R... 5 months ago
Used by 262k
D browsersta... Add Google Pixel to tested d... 8 months ago
HD + 201,002
DB index.js Fix importing module when n... 3 years ago aU Ca 6 i=
(1 packageson Bump eslint-plugin-html from ... last month
. Contributors 50
© rollup.confi... Revert "Generate Commond... 14 months ago
[= README.md =) Q ® $ Ce)
> Cookies.|_defineGetter_
ee nett +39 contributors
¢ JavaScript Cookie Languages
. =
© JavaScript 96.2% © HTML 3.8%

Asimple, lightweight JavaScript API for handling cookies
+ Works in all browsers
+ Accepts any character
+ Heavily tested
+ No dependency
+ Supports ES modules
+ Supports AMD/CommonJS
* RFC 6265 compliant
* Useful Wiki
* Enable custom encoding/decoding
+ <800 bytes gzipped!

@ If you're viewing this at https://github.comljs-

cookieljs-cookie, you're reading the documentation

for the master branch. View documentation for the

latest release. B®

2 Installation
@NPM

JavaScript Cookie supports npm under the name js-

cookie .
$ npm i js-cookie

The npm package has a modute field pointing to an ES

module variant of the library, mainly to provide support for

ES module aware bundlers, whereas its browser field

points to an UMD module for full backward compatibility.

@ Direct download

Starting with version 3 releases are distributed with two

variants of this library, an ES module as well as an UMD

module.

Note the different extensions: .mjs denotes the ES

module, whereas . js is the UMD one.

Example for how to load the ES module in a browser:
<script type="modute" src="/path/to/js.cookie.mjs
<script type="modute">

import Cookies from '/path/to/js.cookie.mjs'
Cookies.set('foo', "bar')

</script>
Not all browsers support ES modules natively yet. For this
reason the npm packagelrelease provides both the ES
and UMD module variant and you may want to include the
ES module along with the UMD fallback to account for
this:

<script type="modute" src="/path/to/js.cookie.mjs

<script nomodule defer src="/path/to/js.cookie.js

Here we're loading the nomodule script in a deferred

fashion, because ES modules are deferred by default.

This may not be strictly necessary depending on how

you're using the library.

@ CDN
Alternatively, include it via jsDelivr CDN.
@ ES Module

Example for how to import the ES module from another

module:

import Cookies from 'js-cookie’

Cookies. set('foo', ‘bar')

@ Basic Usage

Create a cookie, valid across the entire site:

Cookies. set('name', 'value')

Create a cookie that expires 7 days from now, valid across

the entire site:

Cookies.set('name', ‘value’, { expires: 7 })

Create an expiring cookie, valid to the path of the current

page:

Cookies.set('name', ‘value’, { expires: 7, path:
Read cookie:

Cookies.get('name') // => ‘value!

Cookies. get(*nothing') // => undefined
Read all visible cookies:

Cookies.get() // => { name: ‘value’ }

Note: It is not possible to read a particular cookie by

passing one of the cookie attributes (which may or may

not have been used when writing the cookie in question):
Cookies.get("foo', { domain: 'sub.example.com' })

The cookie with the name foo will only be available on
.get() if it's visible from where the code is called; the

domain and/or path attribute will not have an effect when

reading.

Delete cookie:

Cookies. remove( ‘name! )

Delete a cookie valid to the path of the current page:
Cookies.set('name', ‘value’, { path: '* })

Cookies. remove('name') // fail!

Cookies. remove('name', { path: '' }) // removed!
IMPORTANT! When deleting a cookie and you're not
relying on the default attributes, you must pass the exact
same path and domain attributes that were used to set the
cookie:

Cookies. remove('name', { path: '', domain: '.your
Note: Removing a nonexistent cookie neither raises any
exception nor returns any value.

¢ Namespace conflicts

If there is any danger of a conflict with the namespace

cookies , the nocontlict method will allow you to

define a new namespace and preserve the original one.

This is especially useful when running the script on third

party sites e.g. as part of a widget or SDK.

// Assign the js-cookie api to a different variab

var Cookies? = Cookies.noConflict()

Cookies2.set(‘name', 'value')

Note: The .noconflict method is not necessary when

using AMD or CommonJS, thus it is not exposed in those

environments.
¢ Encoding

This project is RFC 6265 compliant. All special characters

that are not allowed in the cookie-name or cookie-value

are encoded with each one’s UTF-8 Hex equivalent using

percent-encoding.

The only character in cookie-name or cookie-value that is

allowed and still encoded is the percent % character, it is

escaped in order to interpret percent input as literal.

Please note that the default encoding/decoding strategy is

meant to be interoperable only between cookies that are

read/written by js-cookie. To override the default
encoding/decoding strategy you need to use a converter.

Note: According to RFC 6265, your cookies may get

deleted if they are too big or there are too many cookies in

the same domain, more details here.

@ Cookie Attributes

Cookie attribute defaults can be set globally by creating

an instance of the api via withattributes() , or

individually for each call to cookies.set(...) by passing

a plain object as the last argument. Per-call attributes

override the default attributes.

2 expires

Define when the cookie will be removed. Value must be a

Nunber Which will be interpreted as days from time of

creation or a Date instance. If omitted, the cookie

becomes a session cookie.

To create a cookie that expires in less than a day, you can

check the FAQ on the Wiki.

Default: Cookie is removed when the user closes the

browser.

Examples:

Cookies.set('name', ‘value’, { expires: 365 })

Cookies. get('name') // => ‘value!

Cookies. remove( ‘name! )

2 path

A String indicating the path where the cookie is visible.

Default: /

Examples:

Cookies.set('name', ‘value’, { path: '* })

Cookies. get('name') // => ‘value!

Cookies. remove('name', { path: '* })

Note regarding Internet Explorer:

Due to an obscure bug in the underlying WinINET

InternetGetCookie implementation, IE's

document.cookie will not return a cookie if it was set

with a path attribute containing a filename.

(From Internet Explorer Cookie Internals (FAQ)

This means one cannot set a path using

window. location.pathname in case such pathname

contains a filename like so: /check.htm1 (oF at least,

such cookie cannot be read correctly).

In fact, you should never allow untrusted input to set the

cookie attributes or you might be exposed to a XSS

attack.

2 domain

A string indicating a valid domain where the cookie

should be visible. The cookie will also be visible to all

subdomains.

Default: Cookie is visible only to the domain or

subdomain of the page where the cookie was created,

except for Internet Explorer (see below)

Examples:

Assuming a cookie that is being created on site.com :
Cookies.set('name', ‘value’, { domain: ‘subdomain
Cookies.get(‘name') // => undefined (need to read

Note regarding Internet Explorer default behavior:

Q3: If don't specify a DOMAIN attribute (for) a

cookie, IE sends it to all nested subdomains

anyway?

A: Yes, a cookie set on example.com will be sent to

sub2.sub1.example.com

Internet Explorer differs from other browsers in this

regard.

(From Internet Explorer Cookie Internals (FAQ)

This means that if you omit the domain attribute, it will be

visible for a subdomain in IE.

@ secure

Either true or fatse , indicating if the cookie

transmission requires a secure protocol (https).

Default: No secure protocol requirement.

Examples:

Cookies.set('name', ‘value’, { secure: true })

Cookies. get('name') // => ‘value!

Cookies. remove( ‘name! )

2 sameSite

A string , allowing to control whether the browser is

sending a cookie along with cross-site requests.

Default: not set.

Note that more recent browsers are making "Lax" the

default value even without specifiying anything here.
Examples:
Cookies.set('name', ‘value’, { sameSite: ‘strict’
Cookies. get('name') // => ‘value!
Cookies. remove( ‘name! )
@ Setting up defaults

const api = Cookies.withAttributes({ path: '/', d
@ Converters
@ Read

Create a new instance of the api that overrides the default

decoding implementation. All get methods that rely in a

proper decoding to work, such as Cookies.get() and

Cookies. get( name") , will run the given converter for

each cookie. The returned value will be used as the

cookie value.

Example from reading one of the cookies that can only be

decoded using the escape function:

document .cookie = ‘escaped=%u5317'

document .cookie = 'default=XESK8CX97"

var cookies = Cookies.withConverter({

read: function (value, name) {
if (name === ‘escaped') {
return unescape(value)
t
7/ Fall back to default for all other cookies
return Cookies.converter.read(value, name)
r

52)

cookies. get("escaped') // 4t

cookies. get('default') // 4t

cookies.get() // { escaped: ‘at, default: "at" }

2 Write

Create a new instance of the api that overrides the default

encoding implementation:

Cookies .withConverter({

write: function (value, name) {
return value. toUpperCase()
r
52)
 TypeScript declarations
$ npm i @types/js-cookie
@ Server-side integration
Check out the Servers Docs
Contributing
Check out the Contributing Guidelines
@ Security
For vulnerability reports, send an e-mail to js-cookie at
googlegroups dot com
@ Releasing

We are using release-it for automated releasing.

Start a dry run to see what would happen:
$ npm run release minor -- --dry-run

Do a real release (publishes both to npm as well as create

anew release on GitHub):

$ npm run release minor
GitHub releases are created as a draft and need to be
published manually! (This is so we are able to craft
suitable release notes before publishing.)

@ Supporters

@ sBrowserStack

Many thanks to BrowserStack for providing unlimited

browser testing free of cost.

¢ Authors

* Klaus Hart!

* Fagner Brack

+ And awesome contributors

Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About
©) ©2022 cittiub, ine
